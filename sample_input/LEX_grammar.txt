//input fromat of regular grammar to identify token
//directly list key words , usually key words is subset of identifier
//#0-key words #1-operator #2-limiter #3-identifier #4-const 
//@-empty_string a-[a-z] d-[0-9] \-shift_meaning in production


#0
boolean
int
#0

#1
S->+
S->-
S->*
S->/
S->%
S->\@
S->+A
A->+
S->-B
B->-
S->(
S->)
S->&
S->|
S->!
S->=
#1

#2
S->;
S->,
#2

#3
//r=a(a|d)*
S->aC
C->aC
C->dC
C->@
#3

#4
//r=d|[1-9]d+
S->d
S->1D
S->2D
S->3D
S->4D
S->5D
S->6D
S->7D
S->8D
S->9D
D->dD
D->d
S->T
S->F
#4